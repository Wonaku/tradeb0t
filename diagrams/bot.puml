@startuml
interface IExchangeTraderHooks {
    +orderSent: (order: GetOrderType<CommonDomain>, operation_type: OperationType, runId: number) => void
}
interface IExchangeTrader {
    +hooks: Hookable<IExchangeTraderHooks, "orderSent">
    +scheduleAction(action: JobCallback, date: Date): Job
    +scheduleOrder(date: Date, order: CreateOrderOptions, algorithm_name?: string, run_id?: number): Job
    +sendOrder(orderDetails: CreateOrderOptions, algorithm_name?: string, run_id?: number): Promise<OrderStatus>
}
interface IExchangeWatcher {
    +getPortfolio(): Promise<GetSecurityBalanceType<CommonDomain>[]>
    +getCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +getCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +getSecurity(ticker: string): Promise<GetSecurityType<CommonDomain>>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<GetCurrencyType<CommonDomain>>
}
interface IExchangeAnalyzer<Domain extends DomainTemplate, TExchangeApi> {
    +tradeAlgos: ITradeAlgorithmsEngine
    +storage: any
    +tradebot: ITradeBot<Domain, TExchangeApi>
    +trader: IExchangeTrader
    +watcher: IExchangeWatcher
    +initialize(): Promise<void>
    +updateCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +updateCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +updateSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updateFollowedSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updatePortfolio(): Promise<GetPortfolioPositionType<CommonDomain>[]>
}
class ExchangeAnalyzer<Domain extends DomainTemplate, TExchangeApi> implements IExchangeAnalyzer {
    +storage: UnitedStorage
    +tradebot: ITradeBot<Domain, TExchangeApi>
    +tradeAlgos: ITradeAlgorithmsEngine
    +trader: IExchangeTrader
    +watcher: IExchangeWatcher
    -_tradeAlgos: ITradeAlgorithmsEngine
    +initialize(): Promise<void>
    +updateCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +updateCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +updateSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updateFollowedSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updatePortfolio(): Promise<GetPortfolioPositionType<CommonDomain>[]>
    -_initAlgorithmsCallback: (analyzer: IExchangeAnalyzer<Domain, TExchangeApi>) => ITradeAlgorithm[]
    -loadSecurityIfNotExist(ticker: string): Promise<any>
    -loadSecuritiesIfNotExist(tickers: string[]): Promise<GetSecurityType<CommonDomain>[]>
    -updateSecuritiesList(securitiesToUpdate: GetSecurityType<CommonDomain>[]): Promise<any>
}
IExchangeTrader --> "1" IExchangeTraderHooks
IExchangeAnalyzer --> "1" IExchangeTrader
IExchangeAnalyzer --> "1" IExchangeWatcher
ExchangeAnalyzer --> "1" IExchangeTrader
ExchangeAnalyzer --> "1" IExchangeWatcher
ExchangeAnalyzer --> "1" IExchangeAnalyzer
@enduml