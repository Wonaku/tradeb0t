// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./storage.db?connection_limit=1&connect_timeout=30"
}

model D_Currency {
  @@map("Currencies")

  name                String
  ticker              String  @id

  instruments         D_Instrument[]
}

model D_Instrument {
  @@map("Instruments")

  name                String
  ticker              String  @id
  price               Float

  currency_ticker     String

  currency              D_Currency  @relation(fields: [currency_ticker], references: [ticker])
  followed_instruments  D_FollowedInstrument[]
  portfolio_positions   D_PortfolioPosition[]
  transactions          D_Operation[]
}

model D_FollowedInstrument {
  @@map("FollowedInstruments")

  instrument_ticker     String  @id
  followed_since      DateTime

  instrument            D_Instrument @relation(fields: [instrument_ticker], references: [ticker])
}

model D_PortfolioPosition {
  @@map("PortfolioPositions")

  instrument_ticker   String @id
  amount              Int

  instrument           D_Instrument @relation(fields: [instrument_ticker], references: [ticker])
}

model D_Operation {
  @@map("Operations")

  exchange_id         String?   @unique
  instrument_ticker   String
  status              String
  operation_type      String
  amount              Int
  price               Float
  run_id              Int?
  updated_at          DateTime  @updatedAt
  created_at          DateTime  @default(now())

  instrument          D_Instrument @relation(fields: [instrument_ticker], references: [ticker])
  algorithm_run       D_AlgorithmRun?  @relation(fields: [run_id], references: [id])

  @@id([instrument_ticker, created_at])
}

model D_Algorithm {
  @@map("Algorithms")

  name               String     @id
  description        String
  input_types        String

  runs               D_AlgorithmRun[]
}

model D_AlgorithmRun {
  @@map("AlgorithmRuns")

  id                 Int        @id @default(autoincrement())
  algorithm_name     String
  inputs             String
  state              String
  updated_at         DateTime   @updatedAt
  created_at         DateTime   @default(now()) 

  algorithm          D_Algorithm  @relation(fields: [algorithm_name], references: [name])
  operations         D_Operation[]
}
