@startuml
abstract class AbstractTradeAlgorithm<InputsType, StateType, StopDataType> {
    #analyzer: ExchangeAnalyzer
    #watcher: ExchangeWatcher
    #trader: ExchangeTrader
    #stopData: Map<number, StopDataType>
    -logger: BotLogger
    +details: D_Algorithm
    #fixStart(inputs: InputsType, state: StateType): Promise<D_AlgorithmRun>
    #fixStop(id: number): Promise<D_AlgorithmRun>
    #fixContinue(id: number): Promise<D_AlgorithmRun>
    #fixFinish(id: number): Promise<D_AlgorithmRun>
    #saveProgress(id: number, progress: StateType): Promise<D_AlgorithmRun>
    #loadProgress(id: number): Promise<D_AlgorithmRun>
    +{abstract} name: string
    +{abstract} description: string
    +{abstract} inputs: any
    +{abstract} main(inputs: InputsType): Promise<D_AlgorithmRun>
    +{abstract} continue(id: number): Promise<D_AlgorithmRun>
    +{abstract} stop(id: number): Promise<D_AlgorithmRun>
}

class SlicingAlgorithm extends AbstractTradeAlgorithm {
    +name: string
    +description: string
    +inputs: any
    +main(inputs: SlicingInput): Promise<D_AlgorithmRun>
    +continue(id: number): Promise<D_AlgorithmRun>
    +stop(id: number): Promise<D_AlgorithmRun>
}

class HammerAlgorithm extends AbstractTradeAlgorithm {
    +name: string
    +description: string
    +inputs: any
    +sendUntilNotRejected(order: OrderDetails, run_id: number): Promise<void>
    +main(inputs: HammerInput): Promise<D_AlgorithmRun>
    +continue(id: number): Promise<D_AlgorithmRun>
    +stop(id: number): Promise<D_AlgorithmRun>
}

class AggressiveTradingAlgorithm extends AbstractTradeAlgorithm {
    +name: string
    +description: string
    +inputs: any
    -followSecurity(securityTicker: string): Promise<D_Security>
    -watchSecurity(securityTicker: string, runId: number, state: AggressiveTraderState): Promise<Job>
    +main(__0: AggressiveTraderInput): Promise<D_AlgorithmRun>
    +continue(id: number): Promise<D_AlgorithmRun>
    +stop(id: number): Promise<D_AlgorithmRun>
}
@enduml
