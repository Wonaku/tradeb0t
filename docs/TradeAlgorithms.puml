@startuml
class TradeAlgorithms {
    -analyzer: ExchangeAnalyzer
    -trader: ExchangeTrader
    -watcher: ExchangeWatcher
    -tradebot: TradeBot
    -algorithms: AbstractTradeAlgorithm<any, any, any>[]
    +description: D_Algorithm[]
    +runAlgorithm(name: string, inputs: any): Promise<D_AlgorithmRun>
    +continueAlgorithms(): Promise<void>
    +continueAlgorithm(name: string, id: number): Promise<D_AlgorithmRun>
    +stopAlgorithm(name: string, id: number): Promise<D_AlgorithmRun>
}

abstract class AbstractTradeAlgorithm<InputsType, StateType, StopDataType> {
    #analyzer: ExchangeAnalyzer
    #watcher: ExchangeWatcher
    #trader: ExchangeTrader
    #stopData: Map<number, StopDataType>
    -logger: BotLogger
    +details: D_Algorithm
    #fixStart(inputs: InputsType, state: StateType): Promise<D_AlgorithmRun>
    #fixStop(id: number): Promise<D_AlgorithmRun>
    #fixContinue(id: number): Promise<D_AlgorithmRun>
    #fixFinish(id: number): Promise<D_AlgorithmRun>
    #fixError(id: number, error: Error): Promise<D_AlgorithmRun>
    #saveProgress(id: number, progress: StateType): Promise<D_AlgorithmRun>
    #loadProgress(id: number): Promise<D_AlgorithmRun>
    +{abstract} name: string
    +{abstract} description: string
    +{abstract} inputs: any
    +{abstract} main(inputs: InputsType): Promise<D_AlgorithmRun>
    +{abstract} continue(id: number): Promise<D_AlgorithmRun>
    +{abstract} stop(id: number): Promise<D_AlgorithmRun>
}
@enduml
