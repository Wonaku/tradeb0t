@startuml
class ExchangeAnalyzer {
    +tradebot: TradeBot
    +trader: ExchangeTrader
    +watcher: ExchangeWatcher
    +tradeAlgos: TradeAlgorithms
    -initUpdaters(): Promise<void>
    -loadSecurityIfNotExist(ticker: string): Promise<D_Security | null>
    -loadSecuritiesIfNotExist(tickers: string[]): Promise<D_Security[]>
    +updateCurrencies(): Promise<D_Currency[]>
    +getCurrencies(): Promise<D_Currency[]>
    +updateCurrenciesBalance(): Promise<D_CurrencyBalance[]>
    +getCurrenciesBalance(): Promise<D_CurrencyBalance[]>
    +updateSecurities(): Promise<D_Security[]>
    +getSecurities(): Promise<D_Security[]>
    +getSecurity(ticker: string): Promise<D_Security>
    +addSecurities(securities: D_Security[]): Promise<D_Security[]>
    +getFollowedSecurities(): Promise<D_FollowedSecurity[]>
    +followSecurity(securityTicker: string): Promise<D_FollowedSecurity>
    +unfollowSecurity(securityTicker: string): Promise<D_FollowedSecurity>
    +updateFollowedSecurities(): Promise<D_Security[]>
    +updatePortfolio(): Promise<D_PortfolioPosition[]>
    +getPortfolio(): Promise<D_PortfolioPosition[]>
    +clearPortfolio(): Promise<number>
    +addPortfolioPosition(portfolioPosition: D_PortfolioPosition): Promise<D_PortfolioPosition>
    +removePortfolioPosition(portfolioPosition: D_PortfolioPosition): Promise<D_PortfolioPosition | null>
    +getPositionAverageBuyPrice(ticker: string): Promise<number>
    +fixOperation(operation: D_Operation): Promise<D_Operation>
    +updateOperationsAll(from?: Date | undefined, to?: Date | undefined): Promise<D_Operation[]>
    +updateOperationsBySecurity(ticker: string): Promise<D_Operation[]>
    +getOperations(__0: GetOperationsOptions): Promise<D_Operation[]>
    +saveOrder(order: D_Order, operation_type: OperationType, run_id?: number | null): Promise<D_Order>
    +getOrders(__0: GetOrdersOptions): Promise<D_Order[]>
    +saveAlgorithms(): Promise<D_Algorithm[]>
    +runAlgorithm(algorithmName: string, inputs: any, state?: any): Promise<D_AlgorithmRun>
    +saveAlgorithmRunProgress(id: number, state: any): Promise<D_AlgorithmRun>
    +loadAlgorithmRunProgress(id: number): Promise<D_AlgorithmRun | null>
    +stopAlgorithmRun(id: number): Promise<D_AlgorithmRun>
    +continueAlgorithmRun(id: number): Promise<D_AlgorithmRun>
    +finishAlgorithmRun(id: number): Promise<D_AlgorithmRun>
    +errorAlgorithmRun(id: number, error: Error): Promise<D_AlgorithmRun>
    +getAlgorithmRunsByAlgorithm(algorithmName: string): Promise<D_AlgorithmRun[]>
    +getUnfinishedAlgorithmRuns(): Promise<D_AlgorithmRun[]>
}
@enduml
