@startuml
abstract class AbstractTradeModule {
    #exchangeClient: AbstractExchangeClient
    +{abstract} sell(__0: OrderDetails): Promise<C_Order>
    +{abstract} buy(__0: OrderDetails): Promise<C_Order>
    +{abstract} marketSell(__0: OrderDetails): Promise<C_Order>
    +{abstract} marketBuy(__0: OrderDetails): Promise<C_Order>
    +{abstract} sellOrCancel(): Promise<C_Order>
    +{abstract} buyOrCancel(): Promise<C_Order>
}
abstract class AbstractExchangeClient {
    +{abstract} api: C_ExchangeApi
    +{abstract} tradeModule: AbstractTradeModule
    +{abstract} infoModule: AbstractInfoModule
    -_isAccountInitialized: boolean
    +isAccountInitialized: boolean
    #isAccountInitialized: boolean
    #{abstract} initAccount(): Promise<unknown>
    +{abstract} getPortfolio(): Promise<C_PortfolioPosition[]>
    +{abstract} getCurrenciesBalance(): Promise<C_CurrencyBalance[]>
    +{abstract} getOperationsAll(from: Date, to: Date): Promise<C_Operation[]>
    +{abstract} getOperationsBySecurity(ticker: string, from: Date, to: Date): Promise<C_Operation[]>
}

abstract class AbstractInfoModule {
    #exchangeClient: AbstractExchangeClient
    +{abstract} getCurrencies(): Promise<C_Currency[]>
    +{abstract} getSecurityLastPrice(ticker: string): Promise<number>
    +{abstract} getSecurityCurrency(ticker: string): Promise<C_Currency>
    +{abstract} getSecurityName(ticker: string): Promise<string>
    +{abstract} getSecurity(ticker: string, ignoreCache: boolean): Promise<C_Security | null>
    +{abstract} getSecurityByExchangeId(id: string, ignoreCache: boolean): Promise<C_Security | null>
}

@enduml
